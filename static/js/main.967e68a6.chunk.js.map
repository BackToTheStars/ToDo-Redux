{"version":3,"sources":["actions/index.js","InputComponent.js","OutputComponent.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/index.js","index.js"],"names":["createTask","name","type","InputComponent","props","useSelector","state","tasks","dispatch","useDispatch","useState","task","setTask","value","onChange","e","target","onSubmit","onCreateTask","onClick","OutputComponent","todos","map","el","key","id","isDone","onToggleDone","onDeleteTask","App","Math","random","setTodos","tempTodos","push","filter","Boolean","window","location","hostname","match","initialState","tasksReducer","action","allReducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.967e68a6.chunk.js","sourcesContent":["\r\n// нельзя мешать в одну кучу имена name, payload, id и т.п.\r\n\r\nexport const createTask = (name) => {\r\n  return {\r\n    type: 'CREATE',\r\n    name: name\r\n  };\r\n};\r\n\r\nexport const doneTask = (id) => {\r\n  return {\r\n    type: 'DONE',\r\n    id: id\r\n  };\r\n};\r\n\r\nexport const changeTask = (task) => {\r\n  return {\r\n    type: 'CHANGE',\r\n    payload: task\r\n  };\r\n};\r\n\r\nexport const deleteTask = (id) => {\r\n  return {\r\n    type: 'DELETE',\r\n    id: id\r\n  };\r\n};\r\n\r\n","import React, {useState} from 'react';\r\n\r\n\r\n// ******  Redux\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { createTask } from \"./actions\";\r\n\r\n\r\nfunction InputComponent(props) {\r\n\r\n  const tasks = useSelector(state => state.tasks); // Redux\r\n  const dispatch = useDispatch(); // Redux\r\n\r\n  const [task, setTask] = useState('');\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={task}\r\n        onChange={(e) => setTask(e.target.value)}\r\n        onSubmit={()=>{ props.onCreateTask(task); setTask(\"\")}}\r\n      />\r\n      <button onClick={() => { props.onCreateTask(task); setTask(\"\")}}>\r\n        Add Task\r\n      </button>\r\n\r\n\r\n      {/*Redux*/}\r\n      <br />\r\n      <input\r\n        type=\"text\"\r\n        value={task}\r\n        onChange={(e) => setTask(e.target.value)}\r\n        onSubmit={()=>{ dispatch(createTask(task)); setTask(\"\")}}\r\n      />\r\n      <button onClick={() => { dispatch(createTask(task)); setTask(\"\")}}>\r\n        Add task to Redux State\r\n      </button>\r\n      {/*сделать task name тоже через State Reducer*/}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputComponent;","import React from 'react';\r\n\r\n\r\n// ******  Redux\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { deleteTask, changeTask, doneTask } from \"./actions\";\r\n\r\n\r\n\r\nfunction OutputComponent(props) {\r\n\r\n  const tasks = useSelector(state => state.tasks); // Redux\r\n  const dispatch = useDispatch(); // Redux\r\n\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {props.todos.map(el =>\r\n          <li key={el.id}>{el.name}{el.isDone===true ? \"✅\" : null}\r\n            <button onClick={() => props.onToggleDone(el.id)}>\r\n              {el.isDone ? \"Undone\" : \"Done\"}\r\n            </button>\r\n            <button onClick={() => props.onDeleteTask(el.id)}>\r\n              Delete</button>\r\n\r\n          </li>\r\n        )}\r\n      </ul>\r\n\r\n\r\n      {/*Redux*/}\r\n      <br />\r\n      <ul>\r\n        {tasks.map(el =>\r\n          <li key={el.id}>{el.name}{el.isDone===true ? \"✅\" : null}\r\n            <button onClick={() => dispatch(doneTask(el.id))}>\r\n              {el.isDone ? \"Undone\" : \"Done\"}\r\n            </button>\r\n            <button onClick={() => dispatch(deleteTask(el.id))}>\r\n              Delete</button>\r\n\r\n          </li>\r\n        )}\r\n      </ul>\r\n      {/*Add change task*/}\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OutputComponent;","\nimport React, {useState} from 'react';\nimport InputComponent from './InputComponent';\nimport OutputComponent from './OutputComponent';\n\n\nfunction App() {\n\n  const[todos, setTodos] = useState([\n    {name: 'First task', id: Math.random(), isDone: false}\n  ]);\n\n  const onCreateTask = (name) => {\n    let tempTodos = [...todos];\n    tempTodos.push({id: Math.random(), isDone: false, name: name});\n    setTodos(tempTodos);\n  };\n  const onDeleteTask = (id) => {\n    let tempTodos = [...todos];\n    tempTodos = tempTodos.filter((el) => el.id !== id);\n    setTodos(tempTodos);\n  }\n  const onToggleDone = (id) => {\n    let tempTodos = [...todos];\n    tempTodos = tempTodos.map(el => {\n      if (el.id===id) return {...el, isDone: !el.isDone};\n      else return el;\n    });\n    setTodos(tempTodos);\n  }\n\n  return (\n    <div>\n      <InputComponent\n        onCreateTask={onCreateTask}\n      />\n      <OutputComponent\n        todos={todos} //переменная\n        onDeleteTask={onDeleteTask}\n        onToggleDone={onToggleDone}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nconst initialState = [\r\n  {name: 'Redux State Zero Task', id: Math.random(), isDone: false}\r\n];\r\n\r\nconst tasksReducer = (state = initialState, action) => {\r\n\r\n  switch(action.type) {\r\n\r\n    case 'CREATE': {\r\n      return [...state,\r\n        {id: Math.random(), isDone: false, name: action.name}];\r\n    }\r\n\r\n    case 'DONE': {\r\n      state = state.map(el => {\r\n        if (el.id === action.id) return {...el, isDone: !el.isDone};\r\n        else return el;\r\n      });\r\n      return state;\r\n    }\r\n\r\n    case 'CHANGE':\r\n      return 0;\r\n\r\n    case 'DELETE': {\r\n      state = state.filter((el) => el.id !== action.id);\r\n      return state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default tasksReducer;","\r\nimport tasksReducer from \"./tasks\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst allReducers = combineReducers({\r\n  tasks: tasksReducer\r\n});\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n// **** Redux\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport allReducers from './reducers';\nconst store = createStore(allReducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/*Redux*/}\n\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}